generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Authentication

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole    @default(VIEWER)
  dept          Departments @default(PK)
  accounts      Account[]
  sessions      Session[]

  userGroups UserGroups[]
  checklists Checklists[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model UserGroups {
  id     String   @id @default(cuid())
  name   String   @unique @db.Text
  users  User[]
  points Points[]
  types  cTypes[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum FormStatus {
  Active
  Passive
}

enum UserRole {
  ADMIN
  VIEWER
  EDITOR
  MOBILE
}

enum Departments {
  ARGE
  URGE
  GKK
  PK
  FQM
  SSH
}

enum QuestionGrade {
  S
  A
  B
  C
}

enum SimulatorStatus {
  Planned
  InProgress
  Completed
  Failed
}

enum AnswerType {
  YesNo
  Text
  MultiChoice
  Numeric
}

enum cTypes {
  STANDART
  ZOBAS
  REGULATION
  COMPLAINT
  SUPPLIER
  TRACING
  GENERIC
  PERIODIC
  COP
  PARTCOP
  GCA
}

// Parameters

model Groups {
  id         String       @id @default(cuid())
  name       String       @unique
  status     FormStatus   @default(Active)
  models     Models[]
  points     Points[]
  checklists Checklists[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Models {
  id         String       @id @default(cuid())
  name       String       @unique @db.Text
  groupsId   String
  vehicles   Vehicles[]
  checklists Checklists[]
  status     FormStatus   @default(Active)
  image      String?      @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups Groups @relation(fields: [groupsId], references: [id], onDelete: Cascade)

  @@index([groupsId])
}

model Vehicles {
  id         String       @id @default(cuid())
  name       String       @unique @db.Text
  modelsId   String
  shortCode  String       @unique @db.Text
  vinCode    String       @unique @db.Text
  images     String[]
  checklists Checklists[]
  status     FormStatus   @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  models Models @relation(fields: [modelsId], references: [id], onDelete: Cascade)

  @@index([modelsId])
}

model Points {
  id         String       @id @default(cuid())
  name       String       @unique @db.Text
  groups     Groups[]
  checklists Checklists[]
  userGroups UserGroups[]
  status     FormStatus   @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id            String          @id @default(cuid())
  name          String          @unique @db.Text
  subCategories SubCategories[]
  status        FormStatus      @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategories {
  id           String     @id @default(cuid())
  name         String     @unique @db.Text
  categoriesId String
  failures     Failures[]
  status       FormStatus @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories Categories @relation(fields: [categoriesId], references: [id], onDelete: Cascade)
  qCatalog   qCatalog?  @relation(fields: [qCatId], references: [id], onDelete: Cascade)
  qCatId     String?

  @@index([categoriesId])
  @@index([qCatId])
}

model Failures {
  id            String          @id @default(cuid())
  code          String          @unique @db.Text
  name          String          @db.Text
  subCategories SubCategories[]
  status        FormStatus      @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Question Catalog
model qCatalog {
  id String @id @default(cuid())

  name     String
  desc     String?
  type     cTypes          @default(STANDART)
  grade    QuestionGrade   @default(B)
  subCat   SubCategories[]
  tag      Tags[]
  images   String[]
  docs     String[]
  version  Int             @default(1)
  isLatest Boolean         @default(true)
  prevId   String?         @unique // Reference to previous version
  prev     qCatalog?       @relation("Versions", fields: [prevId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  next     qCatalog?       @relation("Versions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([prevId])
}

model Tags {
  id     String  @id @default(cuid())
  name   String  @unique @db.Text
  qCatId String?

  qCatalog qCatalog? @relation(fields: [qCatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([qCatId])
}

// Checklists
model Checklists {
  id String @id @default(cuid())

  type   cTypes   @default(STANDART)
  name   String   @unique
  desc   String?
  points Points[]

  itemNo    String[]
  groups    Groups[]
  models    Models[]
  vehicles  Vehicles[]
  questions cQuestions[]
  dealers   Dealers[]

  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model cQuestions {
  id String @id @default(cuid())

  name   String
  desc   String?
  type   cTypes        @default(STANDART)
  grade  QuestionGrade @default(B)
  images String[]
  docs   String[]

  checklistId String

  qCatalogId  String? // Reference to original qCatalog for tracking
  qCatalogVer Int     @default(1) // Version of qCatalog when added

  checklist Checklists @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([checklistId])
}

model Dealers {
  id           String  @id @default(cuid())
  name         String
  code         String  @unique
  checklistsId String?
  // claims       Claims[]

  checklists Checklists? @relation(fields: [checklistsId], references: [id], onDelete: Cascade)

  @@index([checklistsId])
}

model Claims {
  id          String   @id @default(cuid())
  claimNumber String   @unique
  claimDate   DateTime
  dealerNo    String
  dealerName  String
  failureCode String
  claimType   String
  vinNo       String
  km          Int
  amount      Float
  status      String
  budget      Float

  // dealer    Dealers  @relation(fields: [dealerNo], references: [code], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dealerNo])
}
