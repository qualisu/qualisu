generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Authentication

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole    @default(VIEWER)
  dept          Departments @default(PK)
  accounts      Account[]
  sessions      Session[]

  userGroups UserGroups[]
  checklists Checklists[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model UserGroups {
  id     String           @id @default(cuid())
  name   String           @unique @db.Text
  users  User[]
  points Points[]
  types  ChecklistTypes[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum FormStatus {
  Active
  Passive
}

enum UserRole {
  ADMIN
  VIEWER
  EDITOR
  MOBILE
}

enum Departments {
  ARGE
  URGE
  GKK
  PK
  FQM
  SSH
}

enum QuestionGrade {
  S
  A
  B
  C
}

enum SimulatorStatus {
  Planned
  InProgress
  Completed
  Failed
}

enum AnswerType {
  YesNo
  Text
  MultiChoice
  Numeric
}

enum ChecklistTypes {
  STANDART
  ZOBAS
  REGULATION
  COMPLAINT
  SUPPLIER
  TRACING
  GENERIC
  PERIODIC
  COP
  PARTCOP
  GCA
}

// Parameters
model VehicleGroup {
  id         String         @id @default(cuid())
  name       String         @unique
  status     FormStatus     @default(Active)
  models     VehicleModel[]
  claims     Claims[]
  points     Points[]
  vehicles   Vehicles[]
  checklists Checklists[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VehicleModel {
  id             String       @id @default(cuid())
  name           String       @unique @db.Text
  vehicleGroupId String
  vehicles       Vehicles[]
  checklists     Checklists[]
  claims         Claims[]
  status         FormStatus   @default(Active)
  image          String?      @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  groups VehicleGroup @relation(fields: [vehicleGroupId], references: [id], onDelete: Cascade)

  @@index([vehicleGroupId])
}

model Vehicles {
  saseNo         String       @id @unique
  warStart       DateTime
  country        String
  warEnd         DateTime
  vehicleGroupId String
  vehicleModelId String
  prodDate       DateTime
  checklists     Checklists[]

  groups VehicleGroup @relation(fields: [vehicleGroupId], references: [id])
  models VehicleModel @relation(fields: [vehicleModelId], references: [id])

  @@index([vehicleGroupId])
  @@index([vehicleModelId])
}

model Points {
  id         String         @id @default(cuid())
  name       String         @unique @db.Text
  groups     VehicleGroup[]
  checklists Checklists[]
  userGroups UserGroups[]
  status     FormStatus     @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model FailureCategory {
  id            String               @id @default(cuid())
  name          String               @unique @db.Text
  subCategories FailureSubCategory[]
  status        FormStatus           @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  reports   Report[] @relation("ReportMainCategory")
}

model FailureSubCategory {
  id             String         @id @default(cuid())
  name           String         @unique @db.Text
  mainCategoryId String
  failureCodes   FailureCodes[]
  status         FormStatus     @default(Active)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  mainCategory    FailureCategory   @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)
  reports         Report[]          @relation("ReportSubCategory")
  QuestionCatalog QuestionCatalog[]

  @@unique([name, mainCategoryId])
  @@index([mainCategoryId])
}

model FailureCodes {
  code          String               @id @unique @db.Text
  descEng       String               @db.Text
  descTurk      String               @db.Text
  subCategories FailureSubCategory[]
  claims        Claims[]
  status        FormStatus           @default(Active)
}

model Dealers {
  id           String  @id @default(cuid())
  name         String
  code         String  @unique
  checklistsId String?
  // claims       Claims[]

  checklists Checklists? @relation(fields: [checklistsId], references: [id], onDelete: Cascade)

  @@index([checklistsId])
}

model Tags {
  id     String  @id @default(cuid())
  name   String  @unique @db.Text
  qCatId String?

  qCatalog QuestionCatalog? @relation(fields: [qCatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([qCatId])
}

// Question Catalog
model QuestionCatalog {
  id            String             @id @default(cuid())
  name          String
  desc          String?
  type          ChecklistTypes     @default(STANDART)
  grade         QuestionGrade      @default(C)
  subCategoryId String
  tags          Tags[]
  images        String[]
  docs          String[]
  version       Int                @default(1)
  isLatest      Boolean            @default(true)
  prevId        String?            @unique
  subCategory   FailureSubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  prev          QuestionCatalog?   @relation("Versions", fields: [prevId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  next          QuestionCatalog?   @relation("Versions")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([prevId])
}

model cQuestions {
  id String @id @default(cuid())

  name   String
  desc   String?
  type   ChecklistTypes @default(STANDART)
  grade  QuestionGrade  @default(B)
  images String[]
  docs   String[]

  checklistId String

  qCatalogId  String? // Reference to original qCatalog for tracking
  qCatalogVer Int     @default(1) // Version of qCatalog when added

  checklist Checklists @relation(fields: [checklistId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([checklistId])
}

// Checklists
model Checklists {
  id String @id @default(cuid())

  type      ChecklistTypes @default(STANDART)
  name      String         @unique
  desc      String?
  userId    String?
  points    Points[]
  itemNo    String[]
  groups    VehicleGroup[]
  models    VehicleModel[]
  vehicles  Vehicles[]
  questions cQuestions[]
  dealers   Dealers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Claims
model Claims {
  claimNo        String   @unique
  claimDate      DateTime
  failureCode    String
  country        String
  dealerName     String   @db.Text
  vehicleGroupId String
  vehicleModelId String
  saseNo         String
  kilometre      Float
  budgetNo       String
  amount         Float

  models   VehicleModel @relation(fields: [vehicleModelId], references: [id])
  groups   VehicleGroup @relation(fields: [vehicleGroupId], references: [id])
  failures FailureCodes @relation(fields: [failureCode], references: [code])

  @@index([vehicleModelId])
  @@index([vehicleGroupId])
}

// Reports
model Report {
  id               String             @id @default(uuid())
  description      String
  mainCategoryName String
  subCategoryName  String
  customMain       String?
  customSub        String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  mainCategory     FailureCategory    @relation("ReportMainCategory", fields: [mainCategoryName], references: [name])
  subCategory      FailureSubCategory @relation("ReportSubCategory", fields: [subCategoryName], references: [name])

  @@index([mainCategoryName])
  @@index([subCategoryName])
}
